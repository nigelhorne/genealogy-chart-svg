#!/usr/bin/env perl

use strict;
use warnings;

use Gedcom;
use Getopt::Std;
use Lingua::EN::NameCase;
use Lingua::EN::NameParse;

my %opts;

getopts('h:m:', \%opts);
die "Usage: $0 [-m max-generation] -h home-person-name filename\n" unless($ARGV[0] && $opts{'h'});

my $ged = Gedcom->new(gedcom_file => $ARGV[0], read_only => 1);
my $me;

if($opts{'h'}) {
	$me = $ged->get_individual($opts{'h'});
	unless($me) {
		die "$0: Can't find '$opts{h}' in $ARGV[0]";
	}
}

my $nameparser = Lingua::EN::NameParse->new();
my $max_generation = $opts{'m'};

doit(person => $me, count => 1, generation => 1);

sub doit
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $person = $params{'person'};
	my $count = $params{'count'};
	my $generation = $params{'generation'};

	if($opts{'m'}) {
		return if($generation > $max_generation);
	}

	my $dob = $person->get_value('birth date');

	if($dob && ($dob =~ /(\d{4})$/)) {
		print "$count,", $person->as_string(), ",$1";
		my $dod = $person->get_value('death date');
		if($dod && ($dod =~ /(\d{4})$/)) {
			print ",$1" if($dod);
		}
		print "\n";
	}

	my @father = $person->father();
	my $father = $father[0];
	my @mother = $person->mother();
	my $mother = $mother[0];

	if($father) {
		doit(person => $father, count => $count * 2, generation => $generation + 1);
	}
	if($mother) {
		doit(person => $mother, count => ($count * 2) + 1, generation => $generation + 1);
	}
}

sub Gedcom::Individual::as_string
{
	my $self = shift;
	my %args = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $name = $self->name();

	$name =~ s/\///g;
	$nameparser->parse($name);

	my %name_components = $nameparser->components();
	my $first_name = $name_components{'given_name_1'};
	my $middle_name = $name_components{'middle_name'};
	my $surname = $name_components{'surname_1'};
	if($name_components{'surname_2'}) {
		$surname .= ' ' . $name_components{'surname_2'};
	}

	my $has_maiden_name;
	if($args{'nee'}) {
		my $sex = $self->get_value('sex');
		if(defined($sex) && ($sex eq 'F')) {
			my $husband = $self->husband();
			if(defined($husband)) {
				$surname = $husband->surname();
				$has_maiden_name = 1;
			}
		}
	}

	my $rc = $first_name;
	if($args{'middle_names'} && $middle_name) {
		$rc .= " $middle_name";
	}

	if($surname) {
		$rc .= ' ' . normalize_name($surname);
		if(my $suffix = $name_components{'suffix'}) {
			$rc .= " $suffix";
		}
	}

	if($has_maiden_name && $self->surname()) {
		$rc .= ' (nee ' . normalize_name($self->surname()) . ')';
	}

	if($args{'include_years'}) {
		my $dob = $self->get_value('birth date');

		my $yob;	# Year of birth
		if($dob && ($dob =~ /.*?(\d{3,4})/)) {
			$yob = $1;
		} else {
			$dob = $self->get_value('baptism date');
			if($dob && ($dob =~ /.*?(\d{3,4})/)) {
				$yob = "c$1";
			}
		}

		my $dod = $self->get_value('death date');

		my $yod;	# Year of death
		if($dod && ($dod =~ /.*?(\d{3,4})/)) {
			$yod = $1;
		} else {
			$dod = $self->get_value('burial date');
			if($dod && ($dod =~ /.*?(\d{3,4})/)) {
				$yod = "c$1";
			}
		}

		$rc .= ' ';

		if($yob) {
			$rc .= $yob;
		}

		$rc .= '-' if($yob || $yod);

		if($yod) {
			return "$rc $yod";
		}
	}

	return $rc;
}

sub normalize_name
{
	# my $name = shift;

	# my $rc;
	# foreach my $word(split(/-| |'/, lc($name))) {
		# $rc .= '-' if($rc && ($name =~ /-/));
		# $rc .= "'" if($rc && ($name =~ /'/));
		# $rc .= ' ' if($rc && ($name =~ / /));
		# $rc .= ucfirst($word);
	# }

	# return $rc;

	return Lingua::EN::NameCase::nc(shift);
}
